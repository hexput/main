name: Build and Release Hexput Runtime

on:
  push:
    branches: [ main ]

# Add explicit permissions for the workflow
permissions:
  contents: write
  packages: read
  actions: read

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install Linux dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libxdo-dev libx11-dev libxi-dev libxtst-dev
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run tests for hexput-runtime
      run: cargo test --verbose -p hexput-runtime
    
    - name: Check hexput-runtime
      run: cargo check -p hexput-runtime

  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: ".exe"
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            suffix: ".exe"
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ""
          # Note: ARM64 cross-compilation removed due to X11 dependency issues
          # Consider using native ARM64 runners or Docker-based solutions in the future

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libxdo-dev libx11-dev libxi-dev libxtst-dev
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build hexput-runtime
      run: |
        cargo build --release --target ${{ matrix.target }} -p hexput-runtime
      shell: bash
    
    - name: Create release directory
      run: mkdir -p release
    
    - name: Copy binary
      run: |
        cp target/${{ matrix.target }}/release/hexput-runtime${{ matrix.suffix }} release/hexput-runtime-${{ matrix.target }}${{ matrix.suffix }}
      shell: bash
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: hexput-runtime-${{ matrix.target }}
        path: release/*

  create-dev-release:
    name: Create Development Release
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    # Add explicit permissions for this job
    permissions:
      contents: write
      packages: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create release directory
      run: mkdir -p release
    
    - name: Organize artifacts
      run: |
        # Copy all binaries from artifacts directories
        find artifacts -name "hexput-runtime*" -type f -exec cp {} release/ \;
        ls -la release/
    
    - name: Generate release tag
      id: tag
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          TAG="dev-$(date +'%Y%m%d-%H%M%S')"
          BUILD_DATE="$(date +'%B %d, %Y at %H:%M:%S UTC')"
        else
          TAG="dev-${GITHUB_REF_NAME}-$(date +'%Y%m%d-%H%M%S')"
          BUILD_DATE="$(date +'%B %d, %Y at %H:%M:%S UTC')"
        fi
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT
        echo "Generated tag: $TAG"
        echo "Build date: $BUILD_DATE"
    
    - name: Create development release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: "Development Release ${{ steps.tag.outputs.tag }}"
        body: |
          ðŸš€ **Automatic Development Release - Hexput Runtime**
          
          This is an automated development release built from the latest code.
          
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Build Date:** ${{ steps.tag.outputs.build_date }}
          
          ## Available Binaries
          
          ### Hexput Runtime
          - `hexput-runtime-x86_64-unknown-linux-gnu` - Linux x64
          - `hexput-runtime-x86_64-pc-windows-msvc.exe` - Windows x64 (MSVC)
          - `hexput-runtime-x86_64-pc-windows-gnu.exe` - Windows x64 (GNU)
          - `hexput-runtime-x86_64-apple-darwin` - macOS x64
          
          ## Usage
          
          1. Download the appropriate binary for your platform
          2. Make it executable (Linux/macOS): `chmod +x hexput-runtime-*`
          3. Run directly: `./hexput-runtime-x86_64-unknown-linux-gnu`
          
          **Note:** This is a development release and may contain bugs. Use stable releases for production.
          
          **ARM64 Support:** ARM64 binaries are currently not available due to cross-compilation complexities with X11 dependencies. Native ARM64 support may be added in future releases.
        files: release/*
        draft: false
        prerelease: false

  cleanup-old-dev-releases:
    name: Cleanup Old Dev Releases
    runs-on: ubuntu-latest
    needs: create-dev-release
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    # Add explicit permissions for this job
    permissions:
      contents: write
    
    steps:
    - name: Delete old development releases
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const releases = await github.rest.repos.listReleases({ owner, repo });
          
          const devReleases = releases.data.filter(release => 
            release.tag_name.startsWith('dev-')
          );
          
          const toDelete = devReleases.slice(3);
          console.log(`Found ${devReleases.length}/${releases.data.length} development releases, deleting ${toDelete.length} old releases.`);
          
          for (const release of toDelete) {
            console.log(`Deleting old dev release: ${release.tag_name}`);
            await github.rest.repos.deleteRelease({ owner, repo, release_id: release.id });
            
            // Also delete the tag
            try {
              await github.rest.git.deleteRef({ owner, repo, ref: `tags/${release.tag_name}` });
            } catch (error) {
              console.log(`Could not delete tag ${release.tag_name}: ${error.message}`);
            }
          }